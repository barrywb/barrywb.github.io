<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTTP的概念、原理、⼯作机制、数据格式和REST</title>
    <url>/posts/ecd9395/</url>
    <content><![CDATA[<h2 id="HTTP的定义"><a href="#HTTP的定义" class="headerlink" title="HTTP的定义"></a>HTTP的定义</h2><table><tr><td bgcolor="#FFFFFF">Hypertext Transfer Protocol，超⽂本传输协议，和 HTML (Hypertext MarkupLanguage 超⽂本标记语⾔) ⼀起诞⽣，⽤于在⽹络上请求和传输 HTML 内容。超⽂本，即「扩展型⽂本」，指的是 HTML 中可以有链向别的⽂本的链接（hyperlink）。</td></tr></table>

<span id="more"></span>

<p>HTTP的⼯作⽅式</p>
<p><strong>浏览器：</strong></p>
<p>⽤户输⼊地址后回⻋或点击链接 -&gt; 浏览器拼装 HTTP 报⽂并发送请求给服务器 -&gt; 服务器处理请求后发送响应报⽂给浏览器 -&gt; 浏览器解析响应报⽂并使⽤渲染引擎显示到界⾯</p>
<h3 id="⼿机-App"><a href="#⼿机-App" class="headerlink" title="⼿机 App"></a>⼿机 App</h3><p>⽤户点击或界⾯⾃动触发联⽹需求 -&gt; Android 代码调⽤拼装 HTTP 报⽂并发送请求到服务器 -&gt; 服务器处理请求后发送响应报⽂给⼿机 -&gt; Android 代码处理响应报⽂并作出相应处理（如储存数据、加⼯数据、显示数据到界⾯）</p>
<h2 id="URL-和-HTTP-报文"><a href="#URL-和-HTTP-报文" class="headerlink" title="URL 和 HTTP 报文"></a>URL 和 HTTP 报文</h2><h4 id="URL格式"><a href="#URL格式" class="headerlink" title="URL格式"></a>URL格式</h4><p>三部分：协议类型、服务器地址(和端⼝号)、路径(Path)</p>
<p>协议类型://服务器地址[:端⼝号]路径</p>
<h3 id="报⽂格式"><a href="#报⽂格式" class="headerlink" title="报⽂格式"></a><strong>报⽂格式</strong></h3><p><strong>请求报⽂</strong></p>
<p><img src="/posts/ecd9395/image-20211016180658687.png"></p>
<p><strong>响应报⽂</strong></p>
<p><img src="/posts/ecd9395/image-20211016184024911.png"></p>
<p><strong>Request Method</strong> <strong>请求⽅法</strong></p>
<p><strong>GET</strong></p>
<ul>
<li><p>⽤于获取资源</p>
</li>
<li><p>对服务器数据不进⾏修改</p>
</li>
<li><p>不发送 Body</p>
</li>
</ul>
<table><tr><td bgcolor="#000000"><font color="white">GET /users/1 HTTP/1.1 <br>
    Host: api.github.com</font></td></tr></table>

<p>对应 Retrofifit 的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GET(&quot;/users/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function">Call&lt;User&gt; <span class="title">getUser</span><span class="params">(<span class="meta">@Path(&quot;id&quot;)</span> String id,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="meta">@Query(&quot;gender&quot;)</span> String gender)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>POST</strong></p>
<ul>
<li>⽤于增加或修改资源</li>
<li>发送给服务器的内容写在 Body ⾥⾯</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/users</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>api.github.com</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>13</span><br><span class="line">name=rengwuxian&amp;gender=male</span><br></pre></td></tr></table></figure>

<p>对应 Retrofifit 的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FormUrlEncoded</span></span><br><span class="line"><span class="meta">@POST(&quot;/users&quot;)</span></span><br><span class="line"><span class="function">Call&lt;User&gt; <span class="title">addUser</span><span class="params">(<span class="meta">@Field(&quot;name&quot;)</span> String name,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="meta">@Field(&quot;gender&quot;)</span> String gender)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>PUT</strong></p>
<ul>
<li>⽤于修改资源</li>
<li>发送给服务器的内容写在 Body ⾥⾯</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">PUT</span> <span class="string">/users/1</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"></span><br><span class="line"><span class="makefile"><span class="section">Host: api.github.com</span></span></span><br><span class="line"><span class="makefile"></span></span><br><span class="line"><span class="makefile"><span class="section">Content-Type: application/x-www-form-urlencoded</span></span></span><br><span class="line"><span class="makefile"></span></span><br><span class="line"><span class="makefile"><span class="section">Content-Length: 13</span></span></span><br><span class="line"><span class="makefile"></span></span><br><span class="line"><span class="makefile">gender=female</span></span><br></pre></td></tr></table></figure>

<p>对应 Retrofifit 的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FormUrlEncoded</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@PUT(&quot;/users/&#123;id&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="function">Call&lt;User&gt; <span class="title">updateGender</span><span class="params">(<span class="meta">@Path(&quot;id&quot;)</span> String id,</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="meta">@Field(&quot;gender&quot;)</span> String gender)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>DELETE</strong></p>
<ul>
<li>⽤于删除资源</li>
<li>不发送 Body</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="string">/users/1</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"></span><br><span class="line"><span class="vim">Hos<span class="variable">t:</span> api.github.<span class="keyword">com</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DELETE(&quot;/users/&#123;id&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="function">Call&lt;User&gt; <span class="title">getUser</span><span class="params">(<span class="meta">@Path(&quot;id&quot;)</span> String id,</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="meta">@Query(&quot;gender&quot;)</span> String gender)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>HEAD</strong></p>
<ul>
<li>和 GET 使⽤⽅法完全相同</li>
<li>和 GET 唯⼀区别在于，返回的响应中没有 Body</li>
</ul>
<p><strong>Status Code</strong> <strong>状态码</strong></p>
<p>三位数字，⽤于对响应结果做出类型化描述（如「获取成功」「内容未找到」）。</p>
<ul>
<li>1xx：临时性消息。如：100 （继续发送）、101（正在切换协议）</li>
<li>2xx：成功。最典型的是 200（OK）、201（创建成功）。</li>
<li>3xx：重定向。如 301（永久移动）、302（暂时移动）、304（内容未改变）。</li>
<li>4xx：客户端错误。如 400（客户端请求错误）、401（认证失败）、403（被禁</li>
<li>⽌）、404（找不到内容）。</li>
<li>5xx：服务器错误。如 500（服务器内部错误）。</li>
</ul>
<p><strong>Header</strong> <strong>⾸部</strong></p>
<p>作⽤：HTTP 消息的 metadata</p>
<p><strong>Host</strong></p>
<p>⽬标主机。注意：不是在⽹络上⽤于寻址的，⽽是在⽬标服务器上⽤于定位⼦服务</p>
<p>器的</p>
<p><strong>Content-Type</strong></p>
<p>指定 Body 的类型。主要有四类：</p>
<p><strong>1. text/html</strong></p>
<p>请求 Web ⻚⾯是返回响应的类型，Body 中返回 html ⽂本。格式如下：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"></span><br><span class="line"><span class="xml">Content-Type: text/html; charset=utf-8</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">Content-Length: 853</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">......</span></span><br></pre></td></tr></table></figure>

<p><strong>2. x-www-form-urlencoded</strong></p>
<p>Web ⻚⾯纯⽂本表单的提交⽅式。</p>
<p><img src="/posts/ecd9395/image-20211021004225150.png" alt="image-20211021004225150"></p>
<p>格式如下：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/users</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"></span><br><span class="line"><span class="makefile"><span class="section">Host: api.github.com</span></span></span><br><span class="line"><span class="makefile"></span></span><br><span class="line"><span class="makefile"><span class="section">Content-Type: application/x-www-form-urlencoded</span></span></span><br><span class="line"><span class="makefile"></span></span><br><span class="line"><span class="makefile"><span class="section">Content-Length: 27</span></span></span><br><span class="line"><span class="makefile"></span></span><br><span class="line"><span class="makefile">name=rengwuxian&amp;gender=male</span></span><br></pre></td></tr></table></figure>

<p>对应 Retrofifit 的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FormUrlEncoded</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@POST(&quot;/users&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="function">Call&lt;User&gt; <span class="title">addUser</span><span class="params">(<span class="meta">@Field(&quot;name&quot;)</span> String name,</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="meta">@Field(&quot;gender&quot;)</span> String gender)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>3. multipart/form-data</strong></p>
<p>Web ⻚⾯含有⼆进制⽂件时的提交⽅式。</p>
<p><img src="/posts/ecd9395/image-20211021004151755.png" alt="image-20211021004151755"></p>
<p>格式如下：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/users</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"></span><br><span class="line"><span class="haskell"><span class="type">Host</span>: hencoder.com</span></span><br><span class="line"><span class="haskell"></span></span><br><span class="line"><span class="haskell"><span class="type">Content</span>-<span class="type">Type</span>: multipart/form-<span class="class"><span class="keyword">data</span>; boundary=<span class="comment">----</span></span></span></span><br><span class="line"><span class="haskell"></span></span><br><span class="line"><span class="haskell"><span class="type">WebKitFormBoundary7MA4YWxkTrZu0gW</span></span></span><br><span class="line"><span class="haskell"></span></span><br><span class="line"><span class="haskell"><span class="type">Content</span>-<span class="type">Length</span>: <span class="number">2382</span></span></span><br><span class="line"><span class="haskell"></span></span><br><span class="line"><span class="haskell"><span class="comment">------WebKitFormBoundary7MA4YWxkTrZu0gW</span></span></span><br><span class="line"><span class="haskell"></span></span><br><span class="line"><span class="haskell"><span class="type">Content</span>-<span class="type">Disposition</span>: form-<span class="class"><span class="keyword">data</span>; name=&quot;name&quot;</span></span></span><br><span class="line"><span class="haskell"></span></span><br><span class="line"><span class="haskell"><span class="title">rengwuxian</span></span></span><br><span class="line"><span class="haskell"></span></span><br><span class="line"><span class="haskell"><span class="comment">------WebKitFormBoundary7MA4YWxkTrZu0gW</span></span></span><br><span class="line"><span class="haskell"></span></span><br><span class="line"><span class="haskell"><span class="type">Content</span>-<span class="type">Disposition</span>: form-<span class="class"><span class="keyword">data</span>; name=&quot;avatar&quot;;</span></span></span><br><span class="line"><span class="haskell"></span></span><br><span class="line"><span class="haskell"><span class="title">filename</span>=<span class="string">&quot;avatar.jpg&quot;</span></span></span><br><span class="line"><span class="haskell"></span></span><br><span class="line"><span class="haskell"><span class="type">Content</span>-<span class="type">Type</span>: image/jpeg</span></span><br><span class="line"><span class="haskell"></span></span><br><span class="line"><span class="haskell"><span class="type">JFIFHHvOwX9jximQrWa</span>......</span></span><br><span class="line"><span class="haskell"></span></span><br><span class="line"><span class="haskell"><span class="comment">------WebKitFormBoundary7MA4YWxkTrZu0gW--</span></span></span><br></pre></td></tr></table></figure>

<p>对应 Retrofifit 的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Multipart</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@POST(&quot;/users&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="function">Call&lt;User&gt; <span class="title">addUser</span><span class="params">(<span class="meta">@Part(&quot;name&quot;)</span> RequestBody name,</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="meta">@Part(&quot;avatar&quot;)</span> RequestBody avatar)</span></span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">RequestBody namePart =</span><br><span class="line"></span><br><span class="line">RequestBody.create(MediaType.parse(<span class="string">&quot;text/plain&quot;</span>),</span><br><span class="line"></span><br><span class="line">nameStr);</span><br><span class="line"></span><br><span class="line">RequestBody avatarPart =</span><br><span class="line"></span><br><span class="line">RequestBody.create(MediaType.parse(<span class="string">&quot;image/jpeg&quot;</span>),</span><br><span class="line"></span><br><span class="line">avatarFile);</span><br><span class="line"></span><br><span class="line">api.addUser(namePart, avatarPart);</span><br></pre></td></tr></table></figure>

<p><strong>4. application/json , image/jpeg , application/zip …</strong></p>
<p>单项内容（⽂本或⾮⽂本都可以），⽤于 Web Api 的响应或者 POST / PUT 的请求</p>
<p>请求中提交 JSON</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/users</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"></span><br><span class="line"><span class="pgsql">Host: hencoder.com</span></span><br><span class="line"><span class="pgsql"></span></span><br><span class="line"><span class="pgsql">Content-<span class="keyword">Type</span>: application/<span class="type">json</span>; charset=utf<span class="number">-8</span></span></span><br><span class="line"><span class="pgsql"></span></span><br><span class="line"><span class="pgsql">Content-Length: <span class="number">38</span></span></span><br><span class="line"><span class="pgsql"></span></span><br><span class="line"><span class="pgsql">&#123;&quot;name&quot;:&quot;rengwuxian&quot;,&quot;gender&quot;:&quot;male&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<p>对应 Retrofifit 的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@POST(&quot;/users&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="function">Call&lt;User&gt; <span class="title">addUser</span><span class="params">(<span class="meta">@Body(&quot;user&quot;)</span> User user)</span></span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要使⽤ JSON 相关的 Converter</span></span><br><span class="line"></span><br><span class="line">api.addUser(user);</span><br></pre></td></tr></table></figure>

<p>响应中返回 JSON</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"></span><br><span class="line"><span class="1c">content-type: application/json; charset=utf-<span class="number">8</span></span></span><br><span class="line"><span class="1c"></span></span><br><span class="line"><span class="1c">content-length: <span class="number">234</span></span></span><br><span class="line"><span class="1c"></span></span><br><span class="line"><span class="1c">[&#123;<span class="string">&quot;login&quot;</span>:<span class="string">&quot;mojombo&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="number">1</span>,<span class="string">&quot;node_id&quot;</span>:<span class="string">&quot;MDQ6VXNl</span></span></span><br><span class="line"><span class="1c"></span></span><br><span class="line"><span class="1c">cjE=<span class="string">&quot;,&quot;</span>avatar_url<span class="string">&quot;:&quot;</span>https:<span class="comment">//avatars0.githubuse</span></span></span><br><span class="line"><span class="1c"></span></span><br><span class="line"><span class="1c">rcontent.com/u/<span class="number">1</span>?v=<span class="number">4</span><span class="string">&quot;,&quot;</span>gravat......</span></span><br></pre></td></tr></table></figure>

<p>请求中提交⼆进制内容</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/user/1/avatar</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"></span><br><span class="line"><span class="yaml"><span class="attr">Host:</span> <span class="string">hencoder.com</span></span></span><br><span class="line"><span class="yaml"></span></span><br><span class="line"><span class="yaml"><span class="attr">Content-Type:</span> <span class="string">image/jpeg</span></span></span><br><span class="line"><span class="yaml"></span></span><br><span class="line"><span class="yaml"><span class="attr">Content-Length:</span> <span class="number">1575</span></span></span><br><span class="line"><span class="yaml"></span></span><br><span class="line"><span class="yaml"><span class="string">JFIFHH9......</span></span></span><br></pre></td></tr></table></figure>

<p>对应 Retrofifit 的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@POST(&quot;users/&#123;id&#125;/avatar&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="function">Call&lt;User&gt; <span class="title">updateAvatar</span><span class="params">(<span class="meta">@Path(&quot;id&quot;)</span> String id, <span class="meta">@Body</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">RequestBody avatar)</span></span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">RequestBody avatarBody =</span><br><span class="line"></span><br><span class="line">RequestBody.create(MediaType.parse(<span class="string">&quot;image/jpeg&quot;</span>),</span><br><span class="line"></span><br><span class="line">avatarFile);</span><br><span class="line"></span><br><span class="line">api.updateAvatar(id, avatarBody)</span><br></pre></td></tr></table></figure>

<p>相应中返回⼆进制内容</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"></span><br><span class="line"><span class="maxima"><span class="built_in">content</span>-type: <span class="built_in">image</span>/jpeg</span></span><br><span class="line"><span class="maxima"></span></span><br><span class="line"><span class="maxima"><span class="built_in">content</span>-<span class="built_in">length</span>: <span class="number">1575</span></span></span><br><span class="line"><span class="maxima"></span></span><br><span class="line"><span class="maxima">JFIFHH9......</span></span><br></pre></td></tr></table></figure>

<p><strong>Content-Length</strong></p>
<p>指定 Body 的⻓度（字节）。</p>
<h2 id="Transfer-chunked-分块传输编码Chunked"><a href="#Transfer-chunked-分块传输编码Chunked" class="headerlink" title="Transfer: chunked (分块传输编码Chunked"></a>Transfer: chunked (分块传输编码Chunked</h2><h2 id="Transfer-Encoding"><a href="#Transfer-Encoding" class="headerlink" title="Transfer Encoding)"></a>Transfer Encoding)</h2><p>⽤于当响应发起时，内容⻓度还没能确定的情况下。和 Content-Length 不同时使</p>
<p>⽤。⽤途是尽早给出响应，减少⽤户等待。</p>
<p>格式：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"></span><br><span class="line"><span class="pgsql">Content-<span class="keyword">Type</span>: <span class="type">text</span>/html</span></span><br><span class="line"><span class="pgsql"></span></span><br><span class="line"><span class="pgsql">Transfer-<span class="keyword">Encoding</span>: chunked</span></span><br><span class="line"><span class="pgsql"></span></span><br><span class="line"><span class="pgsql"><span class="number">4</span></span></span><br><span class="line"><span class="pgsql"></span></span><br><span class="line"><span class="pgsql">Chun</span></span><br><span class="line"><span class="pgsql"></span></span><br><span class="line"><span class="pgsql"><span class="number">9</span></span></span><br><span class="line"><span class="pgsql"></span></span><br><span class="line"><span class="pgsql">ked Trans</span></span><br><span class="line"><span class="pgsql"></span></span><br><span class="line"><span class="pgsql"><span class="number">12</span></span></span><br><span class="line"><span class="pgsql"></span></span><br><span class="line"><span class="pgsql">fer <span class="keyword">Encoding</span></span></span><br><span class="line"><span class="pgsql"></span></span><br><span class="line"><span class="pgsql"><span class="number">0</span></span></span><br><span class="line"><span class="pgsql"></span></span><br><span class="line"><span class="pgsql"></span></span><br></pre></td></tr></table></figure>



<p><strong>Location</strong></p>
<p>指定重定向的⽬标 URL</p>
<p><strong>User-Agent</strong></p>
<p>⽤户代理，即是谁实际发送请求、接受响应的，例如⼿机浏览器、某款⼿机 App。</p>
<p><strong>Range / Accept-Range</strong></p>
<p>按范围取数据</p>
<p>Accept-Range: bytes 响应报⽂中出现，表示服务器⽀持按字节来取范围数据</p>
<p>Range: bytes=<start>-<end> 请求报⽂中出现，表示要取哪段数据</end></start></p>
<p>Content-Range:<start>-<end>/total 响应报⽂中出现，表示发送的是哪段数据</end></start></p>
<p>作⽤：断点续传、多线程下载。</p>
<p><strong>其他</strong> <strong>Headers</strong></p>
<ul>
<li>Accept: 客户端能接受的数据类型。如 text/html</li>
<li>Accept-Charset: 客户端接受的字符集。如 utf-8</li>
<li>Accept-Encoding: 客户端接受的压缩编码类型。如 gzip</li>
<li>Content-Encoding：压缩类型。如 gzip</li>
</ul>
<p><strong>Cache</strong></p>
<p>作⽤：在客户端或中间⽹络节点缓存数据，降低从服务器取数据的频率，以提⾼⽹</p>
<p>络性能。</p>
<p><strong>REST</strong></p>
<p>REST 的定义众说纷纭，没有统⼀答案。</p>
<p>扔物线的观点：REST HTTP 即正确使⽤ HTTP。包括：</p>
<ul>
<li>使⽤资源的格式来定义 URL</li>
<li>规范地使⽤ method 来定义⽹络请求操作</li>
<li>规范地使⽤ status code 来表示响应状态</li>
<li>其他符合 HTTP 规范的设计准则</li>
</ul>
<p><end>摘自——扔物线课程</end></p>
]]></content>
      <categories>
        <category>http</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 多线程和线程同步</title>
    <url>/posts/16d1401c/</url>
    <content><![CDATA[<h4 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h4><ul>
<li><p>进程和线程</p>
<ul>
<li><p>操作系统中运⾏多个软件</p>
</li>
<li><p>⼀个运⾏中的软件可能包含多个进程</p>
</li>
<li><p>⼀个运⾏中的进程可能包含多个线程</p>
<span id="more"></span></li>
</ul>
</li>
<li><p>CPU 线程和操作系统线程</p>
<ul>
<li>CPU 线程<ul>
<li>多核 CPU 的每个核各⾃独⽴运⾏，因此每个核⼀个线程</li>
<li>「四核⼋线程」：CPU 硬件⽅在硬件级别对 CPU 进⾏了⼀核多线程的⽀持（本质上依然是每个核⼀个线程）</li>
</ul>
</li>
<li>操作系统线程：操作系统利⽤时间分⽚的⽅式，把 CPU 的运⾏拆分给多条运⾏逻辑，即为操作系统的线程</li>
<li>单核 CPU 也可以运⾏多线程操作系统</li>
</ul>
</li>
<li><p>线程是什么：按代码顺序执⾏下来，执⾏完毕就结束的⼀条线</p>
<ul>
<li>UI 线程为什么不会结束？因为它在初始化完毕后会执⾏死循环，循环的内容是刷新界⾯</li>
</ul>
</li>
</ul>
<h4 id="多线程的使用"><a href="#多线程的使用" class="headerlink" title="多线程的使用"></a>多线程的使用</h4><ul>
<li><p>Thread 和 Runnable</p>
<ul>
<li><p>Thread</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread thread = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;Thread started!&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>Runnable</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;Thread with Runnable</span></span><br><span class="line"><span class="string">started!&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure>



<ul>
<li>ThreadFactory</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ThreadFactory factory = <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line"> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line"> count ++;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">&quot;Thread-&quot;</span> + count);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">System.out.println(Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">&quot; started!&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Thread thread = factory.newThread(runnable);</span><br><span class="line">thread.start();</span><br><span class="line">Thread thread1 = factory.newThread(runnable);</span><br><span class="line">thread1.start();</span><br></pre></td></tr></table></figure>



<ul>
<li><p>Executor 和线程池</p>
<ul>
<li>常⽤： newCachedThreadPool()</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;Thread with Runnable</span></span><br><span class="line"><span class="string">started!&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Executor executor =</span><br><span class="line">Executors.newCachedThreadPool();</span><br><span class="line">executor.execute(runnable);</span><br><span class="line">executor.execute(runnable);</span><br><span class="line">executor.execute(runnable);</span><br></pre></td></tr></table></figure>



<ul>
<li>短时批量处理： newFixedThreadPool()</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ExecutorService executor =</span><br><span class="line">Executors.newFixedThreadPool(20);</span><br><span class="line">for (Bitmap bitmap : bitmaps) &#123;</span><br><span class="line"> executor.execute(bitmapProcessor(bitmap));</span><br><span class="line">&#125;</span><br><span class="line">executor.shutdown();</span><br></pre></td></tr></table></figure>



<ul>
<li>Callable 和 Future</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Callable&lt;String&gt; callable = <span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> Thread.sleep(<span class="number">1500</span>);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;Done!&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">ExecutorService executor =</span><br><span class="line">Executors.newCachedThreadPool();</span><br><span class="line">Future&lt;String&gt; future = executor.submit(callable);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> String result = future.get();</span><br><span class="line"> System.out.println(<span class="string">&quot;result: &quot;</span> + result);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="线程同步与线程安全"><a href="#线程同步与线程安全" class="headerlink" title="线程同步与线程安全"></a>线程同步与线程安全</h4><ul>
<li><p>synchronized</p>
<ul>
<li><p>synchronized ⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> newValue)</span> </span>&#123;</span><br><span class="line"> x = newValue;</span><br><span class="line"> y = newValue;</span><br><span class="line"> <span class="keyword">if</span> (x != y) &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;x: &quot;</span> + x + <span class="string">&quot;, y:&quot;</span> + y);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>synchronized 代码块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> newValue)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line"> x = newValue;</span><br><span class="line"> y = newValue;</span><br><span class="line"> <span class="keyword">if</span> (x != y) &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;x: &quot;</span> + x + <span class="string">&quot;, y:&quot;</span></span><br><span class="line">+ y);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span> (monitor1) &#123;</span><br><span class="line"> <span class="keyword">synchronized</span> (monitor2) &#123;</span><br><span class="line"> name = x + <span class="string">&quot;-&quot;</span> + y;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>synchronized 的本质</p>
<ul>
<li>保证⽅法内部或代码块内部资源（数据）的<strong>互斥访问</strong>。即同⼀时间、由同⼀个 Monitor 监视的代码，最多只能有⼀个线程在访问</li>
</ul>
<p><img src="/posts/16d1401c/image-20220403010029587.png" alt="image-20220403010029587"></p>
<ul>
<li>保证线程之间对监视资源的<strong>数据同步</strong>。即，任何线程在获取到 Monitor后的第⼀时间，会先将共享内存中的数据复制到⾃⼰的缓存中；任何线程在释放 Monitor 的第⼀时间，会先将缓存中的数据复制到共享内存中。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="/posts/16d1401c/image-20220403094718582.png" alt="image-20220403094718582"></p>
<ul>
<li><p>volatile</p>
<ul>
<li>保证加了 volatile 关键字的字段的操作具有<strong>同步性</strong>，以及对 long 和double 的操作的原⼦性（long double 原⼦性这个简单说⼀下就⾏）。因此 volatile可以看做是简化版的 synchronized。</li>
<li>volatile 只对基本类型 (byte、char、short、int、long、flfloat、double、boolean) 的赋值操作和对象的引⽤赋值操作有效，你要修改 User.name 是不能保证同步的。</li>
<li>volatile 依然解决不了 ++ 的原⼦性问题。</li>
</ul>
</li>
<li><p>java.util.concurrent.atomic 包：</p>
<ul>
<li>下⾯有 AtomicInteger AtomicBoolean 等类，作⽤和 volatile 基本⼀致，可以看做是通⽤版的 volatile。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AtomicInteger atomicInteger = <span class="keyword">new</span></span><br><span class="line">AtomicInteger(<span class="number">0</span>);</span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line">atomicInteger.getAndIncrement();</span><br></pre></td></tr></table></figure>



<ul>
<li><p>Lock / ReentrantReadWriteLock</p>
<ul>
<li>同样是「加锁」机制。但使⽤⽅式更灵活，同时也更麻烦⼀些。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> x++;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"> lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>finally 的作⽤：保证在⽅法提前结束或出现 Exception 的时候，依然能正常释放锁。</p>
<ul>
<li>⼀般并不会只是使⽤ Lock ，⽽是会使⽤更复杂的锁，例如ReadWriteLock ：</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ReentrantReadWriteLock lock = <span class="keyword">new</span></span><br><span class="line">ReentrantReadWriteLock();</span><br><span class="line">Lock readLock = lock.readLock();</span><br><span class="line">Lock writeLock = lock.writeLock();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</span><br><span class="line">writeLock.lock();</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> x++;</span><br><span class="line"> &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"> writeLock.unlock();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> time)</span> </span>&#123;</span><br><span class="line"> readLock.lock();</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; time; i++) &#123;</span><br><span class="line"> System.out.print(x + <span class="string">&quot; &quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> System.out.println();</span><br><span class="line"> &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"> readLock.unlock();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>线程安全问题的本质:</li>
</ul>
<p>在多个线程访问共同的资源时，在某<strong>⼀个线程</strong>对资源进⾏<strong>写操作的中途</strong>（写⼊已经开始，但还没结束），<strong>其他线程</strong>对这个<strong>写了⼀半的资源</strong>进⾏了<strong>读操作</strong>，或者基于这个<strong>写了⼀半的资源</strong>进⾏了<strong>写操作</strong>，导致出现<strong>数据错误</strong>。</p>
<ul>
<li>锁机制的本质：</li>
</ul>
<p>通过对共享资源进⾏访问限制，让同⼀时间只有⼀个线程可以访问资源，保证了数据的准确性。</p>
<ul>
<li>不论是线程安全问题，还是针对线程安全问题所衍⽣出的锁机制，它们的核⼼都在于共享的<strong>资源</strong>，⽽不是某个⽅法或者某⼏⾏代码。</li>
</ul>
<p><end>摘自——扔物线课程</end></p>
]]></content>
      <tags>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>View绘制流程</title>
    <url>/posts/5001dce4/</url>
    <content><![CDATA[<h1 id="View-绘制流程"><a href="#View-绘制流程" class="headerlink" title="View 绘制流程"></a>View 绘制流程</h1><span id="more"></span>

<h2 id="View-绘制流程主要对象图示"><a href="#View-绘制流程主要对象图示" class="headerlink" title="View 绘制流程主要对象图示"></a>View 绘制流程主要对象图示</h2><p><img src="/posts/5001dce4/image-20220209000231781.png" alt="image-20220209000231781"></p>
<h2 id="View-绘制流程函数调用"><a href="#View-绘制流程函数调用" class="headerlink" title="View 绘制流程函数调用"></a>View 绘制流程函数调用</h2><p><img src="/posts/5001dce4/image-20220209000329378.png" alt="image-20220209000329378"></p>
<h2 id="在子线程中更新-UI-不报错的几种方式"><a href="#在子线程中更新-UI-不报错的几种方式" class="headerlink" title="在子线程中更新 UI 不报错的几种方式"></a>在子线程中更新 UI 不报错的几种方式</h2><ol>
<li>主线程申请成功后⼦线程申请</li>
</ol>
<p><img src="/posts/5001dce4/image-20220209000428268.png" alt="image-20220209000428268"></p>
<ol start="2">
<li>在⼦线程中创建 ViewRootImpl</li>
</ol>
<p><img src="/posts/5001dce4/image-20220209000449755.png" alt="image-20220209000449755"></p>
<ol start="3">
<li><p>利⽤硬件加速机制绕开 requestLayout()</p>
<p>在硬件加速的⽀持下，如果控件只是经常了 invalidate() ，⽽没有触发requestLayout() 是不会 触发 ViewRootImpl#checkThread() 的。</p>
</li>
<li><p>SurfaceView</p>
</li>
</ol>
<p>Android 中有⼀个控件 SurfaceView ，它可以通过 holder 获得 Canvas 对象，可以直接在⼦线程中更新 UI。</p>
<p><end>摘自——扔物线课程</end></p>
]]></content>
      <tags>
        <tag>源码</tag>
        <tag>绘制</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin 进阶</title>
    <url>/posts/4fa27f9d/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>TCP/IP 和 HTTPS</title>
    <url>/posts/58e77ae9/</url>
    <content><![CDATA[<p><strong>TCP / IP</strong> <strong>协议族</strong></p>
<p><strong>概念</strong></p>
<p>⼀系列协议所组成的⼀个⽹络分层模型</p>
<span id="more"></span>

<p><strong>为什么要分层？</strong></p>
<p>因为⽹络的不稳定性</p>
<p><strong>具体分层：</strong></p>
<p><img src="/posts/58e77ae9/image-20211117231636346.png" alt="image-20211117231636346"></p>
<ul>
<li>Application Layer 应⽤层：HTTP、FTP、DNS</li>
<li>Transport Layer 传输层：TCP、UDP</li>
<li>Internet Layer ⽹络层：IP</li>
<li>Link Layer 数据链路层：以太⽹、Wi-Fi</li>
</ul>
<p><strong>TCP</strong> <strong>连接</strong></p>
<p><strong>什么叫做连接</strong></p>
<p>通信双⽅建⽴确认「可以通信」，不会将对⽅的消息丢弃，即为「建⽴连接」</p>
<h5 id="TCP-连接的建⽴与关闭"><a href="#TCP-连接的建⽴与关闭" class="headerlink" title="TCP 连接的建⽴与关闭"></a>TCP 连接的建⽴与关闭</h5><p><img src="/posts/58e77ae9/image-20211117231811066.png" alt="image-20211117231811066"></p>
<p><img src="/posts/58e77ae9/image-20211117231845184.png" alt="image-20211117231845184"></p>
<h4 id="⻓连接"><a href="#⻓连接" class="headerlink" title="⻓连接"></a>⻓连接</h4><h4 id="为什么要⻓连接？"><a href="#为什么要⻓连接？" class="headerlink" title="为什么要⻓连接？"></a>为什么要⻓连接？</h4><p>因为移动⽹络并不在 Internet 中，⽽是在运营商的内⽹，并不具有真正的公⽹ IP，因此当某个 TCP 连接在⼀段时间不通信之后，⽹关会出于⽹络性能考虑⽽关闭这条TCP 连接和公⽹的连接通道，导致这个 TCP 端⼝不再能收到外部通信消息，即 TCP连接被动关闭。</p>
<p><strong>⻓连接的实现⽅式</strong></p>
<p>⼼跳。即在⼀定间隔时间内，使⽤ TCP 连接发送超短⽆意义消息来让⽹关不能将⾃⼰定义为「空闲连接」，从⽽防⽌⽹关将⾃⼰的连接关闭。</p>
<p><end>摘自——扔物线课程</end></p>
]]></content>
      <tags>
        <tag>TCP/IP</tag>
        <tag>Https</tag>
      </tags>
  </entry>
  <entry>
    <title>登录和第三方授权</title>
    <url>/posts/3b60524c/</url>
    <content><![CDATA[<p><strong>登录和授权的区别</strong></p>
<ul>
<li>登录：身份认证，即确认「你是你」的过程。</li>
<li>授权：由身份或持有的令牌确认享有某些权限（例如获取⽤户信息）。⽽登录过程实质上的⽬的也是为了确认权限。</li>
</ul>
<p>因此，在实际的应⽤中，多数场景下的「登录」和「授权」界限是模糊的。</p>
<span id="more"></span>

<p><strong>HTTP</strong> <strong>中确认授权（或登录）的两种⽅式</strong></p>
<ol>
<li><p>通过 Cookie</p>
</li>
<li><p>通过 Authorization Header</p>
</li>
</ol>
<p><strong>Cookie</strong></p>
<ul>
<li><p>起源：「购物⻋」功能的需求，由 Netscape 浏览器开发团队打造。</p>
</li>
<li><p>⼯作机制：</p>
<p>​    1.服务器需要客户端保存的内容，放在 Set-Cookie headers ⾥返回，客户端会⾃动保存。</p>
<p>​    2.客户端保存的 Cookies，会在之后的所有请求⾥都携带进 Cookie header⾥发回给服务器。</p>
<p>​    3.客户端保存 Cookie 是按照服务器域名来分类的，例如 shop.com 发回的Cookie 保存下来以后，在之后向 games.com 的请求中并不会携带。</p>
<p>​    4.客户端保存的 Cookie 在超时后会被删除、没有设置超时时间的 Cookie（称作 Session Cookie）在浏览器关闭后就会⾃动删除；另外，服务器也</p>
<p>​        可以主动删除还未过期的客户端 Cookies。</p>
</li>
</ul>
<p><img src="/posts/3b60524c/image-20211114231534151.png" alt="image-20211114231534151"></p>
<p><img src="/posts/3b60524c/image-20211114231601795.png" alt="image-20211114231601795"></p>
<p><img src="/posts/3b60524c/image-20211114231616591.png" alt="image-20211114231616591"></p>
<p><img src="/posts/3b60524c/image-20211114231632525.png" alt="image-20211114231632525"></p>
<p><img src="/posts/3b60524c/image-20211114231727727.png" alt="image-20211114231727727"></p>
<p><img src="/posts/3b60524c/image-20211114231735433.png" alt="image-20211114231735433"></p>
<ul>
<li>Cookie 的作⽤<pre><code>    会话管理：登录状态、购物⻋
</code></pre>
</li>
</ul>
<p><img src="/posts/3b60524c/image-20211114231948837.png" alt="image-20211114231948837"></p>
<p><img src="/posts/3b60524c/image-20211114232000135.png" alt="image-20211114232000135"></p>
<p><img src="/posts/3b60524c/image-20211114232008813.png" alt="image-20211114232008813"></p>
<p><img src="/posts/3b60524c/image-20211114232036107.png" alt="image-20211114232036107"></p>
<ul>
<li>个性化：⽤户偏好、主题</li>
</ul>
<p><img src="/posts/3b60524c/image-20211114232103065.png" alt="image-20211114232103065"></p>
<p><img src="/posts/3b60524c/image-20211114232112584.png" alt="image-20211114232112584"></p>
<p><img src="/posts/3b60524c/image-20211114232118759.png" alt="image-20211114232118759"></p>
<p><img src="/posts/3b60524c/image-20211114232133924.png" alt="image-20211114232133924"></p>
<ul>
<li>Tracking：分析⽤户⾏为</li>
</ul>
<p><img src="/posts/3b60524c/image-20211114232153996.png" alt="image-20211114232153996"></p>
<ul>
<li><p>XSS (Cross-site scripting)（了解即可）：跨站脚本攻击。即使⽤ JavaScript 拿到浏览器的 Cookie 之后，发送到⾃⼰的⽹站，以这种⽅式来盗取⽤户</p>
<p>Cookie。应对⽅式：Server 在发送 Cookie 时，敏感的 Cookie 加上HttpOnly。</p>
<ul>
<li>应对⽅式：HttpOnly——这个 Cookie 只能⽤于 HTTP 请求，不能被 调⽤。它可以防⽌本地代码滥⽤ Cookie。</li>
</ul>
</li>
<li><p>XSRF (Cross-site request forgery)（了解即可）：跨站请求伪造。即在⽤户不知情的情况下访问已经保存了 Cookie 的⽹站，以此来越权操作⽤户账户（例如</p>
<p>盗取⽤户资⾦）。应对⽅式主要是从服务器安全⻆度考虑，就不多说了。</p>
<ul>
<li>应对⽅式：Referer 校验。</li>
</ul>
</li>
</ul>
<p><strong>Authorization</strong></p>
<p>两种主流⽅式： Basic 和 Bearer</p>
<p><strong>Basic****：</strong></p>
<ul>
<li>格式：Authorization: Basic <a href="username:password(Base64ed)">username:password(Base64ed)</a></li>
</ul>
<p><strong>Bearer****：</strong></p>
<ul>
<li>格式：Authorization: Bearer <bearer token></bearer></li>
<li>bearer token 的获取⽅式：通过 OAuth2 的授权流程</li>
<li>OAuth2 的流程（下⾯的⽂字可以配合视频课程或者 PPT 中的图来看）：</li>
</ul>
<ol>
<li><p> 第三⽅⽹站向授权⽅⽹站申请第三⽅授权合作，拿到 client id 和 client secret</p>
</li>
<li><p> ⽤户在使⽤第三⽅⽹站时，点击「通过 XX (如 GitHub) 授权」按钮，第三⽅⽹站将⻚⾯跳转到授权⽅⽹站，并传⼊ client id 作为⾃⼰的身份标识</p>
</li>
<li><p>授权⽅⽹站根据 client id ，将第三⽅⽹站的信息和第三⽅⽹站需要的⽤户权限展示给⽤户，并询问⽤户是否同意授权</p>
</li>
<li><p>⽤户点击「同意授权」按钮后，授权⽅⽹站将⻚⾯跳转回第三⽅⽹站，并传⼊ Authorization code 作为⽤户认可的凭证。</p>
</li>
<li><p> 第三⽅⽹站将 Authorization code 发送回⾃⼰的服务器</p>
</li>
<li><p> 服务器将 Authorization code 和⾃⼰的 client secret ⼀并发送给授权⽅的服务器，授权⽅服务器在验证通过后，返回 access token。OAuth 流程结</p>
</li>
</ol>
<p>   束。</p>
<ol start="7">
<li> 在上⾯的过程结束之后，第三⽅⽹站的服务器（或者有时客户端也会）就可以使⽤ access token 作为⽤户授权的令牌，向授权⽅⽹站发送请求来获取</li>
</ol>
<p>   ⽤户信息或操作⽤户账户。但这已经在 OAuth 流程之外。</p>
<p>为什么 OAuth 要引⼊ Authorization code，并需要申请授权的第三⽅将Authorization code 发送回⾃⼰的服务器，再从服务器来获取 access token，</p>
<p>⽽不是直接返回 access token ？这样复杂的流程意义何在？ 为了安全。OAuth不强制授权流程必须使⽤ HTTPS，因此需要保证当通信路径中存在窃听者时，</p>
<p>依然具有⾜够⾼的安全性。</p>
<ul>
<li><p>第三⽅ App 通过微信登录的流程，也是⼀个 OAuth2 流程：</p>
<ol>
<li><p> 第三⽅ App 向腾讯申请第三⽅授权合作，拿到 client id 和 client secret</p>
</li>
<li><p>⽤户在使⽤第三⽅ App 时，点击「通过微信登录」，第三⽅ App 将使⽤微信 SDK 跳转到微信，并传⼊⾃⼰的 client id 作为⾃⼰的身份标识</p>
</li>
<li><p>微信通过和服务器交互，拿到第三⽅ App 的信息，并限制在界⾯中，然后询问⽤户是否同意授权该 App 使⽤微信来登录</p>
</li>
<li><p>⽤户点击「使⽤微信登录」后，微信和服务器交互将授权信息提交，然后跳转回第三⽅ App，并传⼊ Authorization code 作为⽤户认可的凭证</p>
</li>
<li><p>第三⽅ App 调⽤⾃⼰服务器的「微信登录」Api，并传⼊ Authorizationcode，然后等待服务器的响应</p>
</li>
<li><p>服务器在收到登录请求后，拿收到的 Authorization code 去向微信的第三⽅授权接⼝发送请求，将 Authorization code 和⾃⼰的 client secret ⼀起</p>
</li>
<li><p>作为参数发送，微信在验证通过后，返回 access token 服务器在收到 access token 后，⽴即拿着 access token 去向微信的⽤户信息接⼝发送请求，微信验证通过后，返回⽤户信息</p>
</li>
<li><p>服务器在收到⽤户信息后，在⾃⼰的数据库中为⽤户创建⼀个账户，并使⽤从微信服务器拿来的⽤户信息填⼊⾃⼰的数据库，以及将⽤户的 ID 和⽤户</p>
<p>的微信 ID 做关联</p>
</li>
<li><p>⽤户创建完成后，服务器向客户端的请求发送响应，传送回刚创建好的⽤户信息</p>
</li>
<li><p> 客户端收到服务器响应，⽤户登录成功</p>
</li>
</ol>
</li>
<li><p>在⾃家 App 中使⽤ Bearer token</p>
<p>有的 App 会在 Api 的设计中，将登录和授权设计成类似 OAuth2 的过程，但简</p>
<p>化掉 Authorization code 概念。即：登录接⼝请求成功时，会返回 access</p>
<p>token，然后客户端在之后的请求中，就可以使⽤这个 access token 来当做</p>
<p>bearer token 进⾏⽤户操作了。</p>
</li>
<li><p>Refresh token</p>
</li>
</ul>
<p><img src="/posts/3b60524c/image-20211114235706401.png" alt="image-20211114235706401"></p>
<p>⽤法：access token 有失效时间，在它失效后，调⽤ refresh token 接⼝，传⼊refresh_token 来获取新的 access token。</p>
<p>⽬的：安全。当 access token 失窃，由于它有失效时间，因此坏⼈只有较短的时间来「做坏事」；同时，由于（在标准的 OAuth2 流程中）refresh token 永远只存在与第三⽅服务的服务器中，因此 refresh token ⼏乎没有失窃的⻛险。</p>
<p><end>摘自——扔物线课程</end></p>
]]></content>
      <tags>
        <tag>授权</tag>
        <tag>登录</tag>
        <tag>token</tag>
      </tags>
  </entry>
  <entry>
    <title>编码、加密、Hash、序列化和字符集</title>
    <url>/posts/520990a1/</url>
    <content><![CDATA[<p><strong>古典密码学</strong></p>
<p>起源于古代战争：在战争中，为了防⽌书信被截获后重要信息泄露，⼈们开始对书信进⾏加密。</p>
<p><strong>移位式加密</strong></p>
<p>如密码棒，使⽤布条缠绕在⽊棒上的⽅式来对书信进⾏加密。</p>
<span id="more"></span>

<p><img src="/posts/520990a1/image-20211021231134318.png" alt="image-20211021231134318"></p>
<p>加密算法：缠绕后书写</p>
<p>密钥：⽊棒的尺⼨</p>
<p><strong>替换式加密</strong></p>
<p>按规则使⽤不同的⽂字来替换掉原先的⽂字来进⾏加密。</p>
<p>码表：</p>
<p>原始字符：ABCDEFGHIJKLMNOPQRSTUVWXYZ</p>
<p>密码字符：BCDEFGHIJKLMNOPQRSTUVWXYZA</p>
<p>原始书信：I love you</p>
<p>加密书信：J mpwf zpv</p>
<p>解读后：I love you</p>
<p>加密算法：替换⽂字</p>
<p>密钥：替换的码表</p>
<p><strong>现代密码学</strong></p>
<ul>
<li>可以加密任何⼆进制数据</li>
<li>⾮对称加密的出现使得密码学有了更⼴泛的⽤途：数字签名</li>
</ul>
<p><strong>对称加密</strong></p>
<p>通信双⽅使⽤同⼀个密钥，使⽤加密算法配合上密钥来加密，解密时使⽤加密过程的完全逆过程配合密钥来进⾏解密。简化模型即上⾯的古典密码学中替换式加密的模型：对⽂字进⾏规则化替换来加密，对密⽂进⾏逆向的规则化替换来解密。</p>
<p><img src="/posts/520990a1/image-20211021234423824.png" alt="image-20211021234423824"></p>
<p><strong>经典算法</strong></p>
<p>DES（56 位密钥，密钥太短⽽逐渐被弃⽤）、AES（128 位、192 位、256 位密钥，现在最流⾏）</p>
<h3 id="对称加密作用"><a href="#对称加密作用" class="headerlink" title="对称加密作用"></a>对称加密作用</h3><p>加密通信，防⽌信息在不安全⽹络上被截获后，信息被⼈读取或篡改。</p>
<h3 id="对称加密（如-AES）的破解"><a href="#对称加密（如-AES）的破解" class="headerlink" title="对称加密（如 AES）的破解"></a>对称加密（如 AES）的破解</h3><p><strong>破解思路</strong></p>
<ul>
<li>拿到⼀组或多组原⽂-密⽂对</li>
<li>设法找到⼀个密钥，这个密钥可以将这些原⽂-密⽂对中的原⽂加密为密⽂，以及将密⽂解密为原⽂的组合，即为成功破解</li>
</ul>
<p><strong>反破解</strong></p>
<p>⼀种优秀的对称加密算法的标准是，让破解者找不到⽐穷举法（暴⼒破解法）更有效的破解⼿段，并且穷举法的破解时间⾜够⻓（例如数千年）。</p>
<p><strong>对称加密的缺点</strong></p>
<p>密钥泄露：不能在不安全⽹络上传输密钥，⼀旦密钥泄露则加密通信失败。</p>
<h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>原理：使⽤公钥对数据进⾏加密得到密⽂；使⽤私钥对数据进⾏解密得到原数据。⾮对称加密使⽤的是复杂的数学技巧，在古典密码学中没有对应的原型。</p>
<p><img src="/posts/520990a1/image-20211021234935853.png" alt="image-20211021234935853"></p>
<p>使⽤⾮对称加密通信，可以在不可信⽹络上将双⽅的公钥传给对⽅，然后在发消息前分别对消息使⽤对⽅的公钥来加密和使⽤⾃⼰的私钥来签名，做到不可信⽹络上的可靠密钥传播及加密通信。</p>
<p><img src="/posts/520990a1/image-20211021235020085.png" alt="image-20211021235020085"></p>
<p>由于私钥和公钥互相可解，因此⾮对称加密还可以应⽤于数字签名技术。</p>
<p><img src="/posts/520990a1/image-20211021235045031.png" alt="image-20211021235045031"></p>
<p>通常会对原数据 hash 以后对 hash 签名，然后附加在原数据的后⾯作为签名。这是为了让数据更⼩。</p>
<p><img src="/posts/520990a1/image-20211021235105372.png" alt="image-20211021235105372"></p>
<h3 id="经典算法：RSA（可用于加密和签名）、DSA（仅用于签名，但速度更快）"><a href="#经典算法：RSA（可用于加密和签名）、DSA（仅用于签名，但速度更快）" class="headerlink" title="经典算法：RSA（可用于加密和签名）、DSA（仅用于签名，但速度更快）"></a>经典算法：RSA（可用于加密和签名）、DSA（仅用于签名，但速度更快）</h3><h4 id="非对称加密的优缺点"><a href="#非对称加密的优缺点" class="headerlink" title="非对称加密的优缺点"></a>非对称加密的优缺点</h4><ul>
<li>优点：可以在不安全⽹络上传输密钥</li>
<li>缺点：计算复杂，因此性能相⽐对称加密差很多</li>
</ul>
<h4 id="⾮对称加密（如-RSA、ECDSA）的破解"><a href="#⾮对称加密（如-RSA、ECDSA）的破解" class="headerlink" title="⾮对称加密（如 RSA、ECDSA）的破解"></a>⾮对称加密（如 RSA、ECDSA）的破解</h4><h5 id="破解思路"><a href="#破解思路" class="headerlink" title="破解思路"></a>破解思路</h5><ul>
<li>和对称加密不同之处在于，⾮对称加密的公钥很容易获得，因此制造原⽂-密⽂对是没有困难的事</li>
<li>所以，⾮对称加密的关键只在于，如何找到⼀个正确的私钥，可以解密所有经过公钥加密过的密⽂。找到这样的私钥即为成功破解</li>
<li>由于⾮对称加密的⾃身特性，怎样通过公钥来推断出私钥通常是⼀种思路（例如RSA），但往往最佳⼿段依然是穷举法，只是和对称加密破解的区别在于，对称加密破解是不断尝试⾃⼰的新密钥是否可以将⾃⼰拿到的原⽂-密⽂对进⾏加密和解密，⽽⾮对称加密时不断尝试⾃⼰的新私钥是否和公钥互相可解。</li>
</ul>
<p><strong>反破解</strong></p>
<p>和对称加密⼀样，⾮对称加密算法优秀的标准同样在于，让破解者找不到⽐穷举法</p>
<p>更有效的破解⼿段，并且穷举法的破解时间⾜够⻓。</p>
<p><strong>密码学密钥和登录密码</strong></p>
<ul>
<li><p>密钥（key）</p>
<ul>
<li>场景：⽤于加密和解密</li>
<li>⽬的：保证数据被盗时不会被⼈读懂内容</li>
<li>焦点：数据</li>
</ul>
</li>
<li><p>登录密码（password）</p>
<ul>
<li>场景：⽤户进⼊⽹站或游戏前的身份验证</li>
<li>⽬的：数据提供⽅或应⽤服务⽅对账户拥有者数据的保护，保证「你是你」的时候才提供权限</li>
<li>焦点：身份</li>
</ul>
</li>
</ul>
<p><strong>Base64</strong></p>
<p>将⼆进制数据转换成由 64 个字符组成的字符串的编码算法</p>
<p><strong>什么是⼆进制数据？</strong></p>
<ul>
<li>⼴义：所有计算机数据都是⼆进制数据</li>
<li>狭义：⾮⽂本数据即⼆进制数据</li>
</ul>
<p><strong>算法</strong></p>
<p>将原数据每 6 位对应成 Base 64 索引表中的⼀个字符编排成⼀个字符串（每个字符8 位）。</p>
<h4 id="Base64-的⽤途"><a href="#Base64-的⽤途" class="headerlink" title="Base64 的⽤途"></a>Base64 的⽤途</h4><ol>
<li> 将⼆进制数据扩充了储存和传输途径（例如可以把数据保存到⽂本⽂件、可以通过聊天对话框或短信形式发送⼆进制数据、可以在 URL 中加⼊简单的⼆进制数据）</li>
<li>普通的字符串在经过 Base64 编码后的结果会变得⾁眼不可读，因此可以适⽤于⼀定条件下的防偷窥（较少⽤）</li>
</ol>
<h4 id="Base64-的缺点"><a href="#Base64-的缺点" class="headerlink" title="Base64 的缺点"></a>Base64 的缺点</h4><p>因为⾃身的原理（6 位变 8 位），因此每次 Base64 编码之后，数据都会增⼤约1/3，所以会影响存储和传输性能。</p>
<h4 id="「Base64-加密图⽚传输更安全和⾼效」？？？"><a href="#「Base64-加密图⽚传输更安全和⾼效」？？？" class="headerlink" title="「Base64 加密图⽚传输更安全和⾼效」？？？"></a>「Base64 加密图⽚传输更安全和⾼效」？？？</h4><p>不。⾸先，Base64 并不是加密；另外，Base64 会导致数据增⼤ 1/3，降低⽹络性能，增⼤⽤户流量开销，是画蛇添⾜的⼿段。（最好不要拿来 diss 你们公司的后端哟，友善）</p>
<p>Base64 对图⽚进⾏编码的⽤于在于，有时需要使⽤⽂本形式来传输图⽚。除此之外，完全没必要使⽤ Base64 对图⽚进⾏额外处理。</p>
<h4 id="变种：Base58"><a href="#变种：Base58" class="headerlink" title="变种：Base58"></a>变种：Base58</h4><p>⽐特币使⽤的编码⽅式，去掉了 Base64 中的数字 “0”，字⺟⼤写 “O”，字⺟⼤写”I”，和字⺟⼩写 “l”，以及 “+” 和 “/“ 符号，⽤于⽐特币地址的表示。<br>Base58 对于 Base64 的改动，主要⽬的在于⽤户的便捷性。由于去掉了难以区分的字符，使得 Base58 对于「⼈⼯抄写」更加⽅便。另外，去掉了 “+” “/“ 号后也让⼤多数的软件可以⽅便双击选取。</p>
<h4 id="URL-使用的百分号编码"><a href="#URL-使用的百分号编码" class="headerlink" title="URL 使用的百分号编码"></a>URL 使用的百分号编码</h4><p>在 URL 的字符串中，对⼀些不⽤于特殊⽤途的保留字符，使⽤百分号 “%” 为前缀进⾏单独编码，以避免出现解析错误。<br>例如，要在 <a href="http://hencoder.com/users">http://hencoder.com/users</a> 后⾯添加查询字符串，查询 name 为「隐秘&amp;伟⼤」的⽤户，如果直接写成 <a href="http://hencoder.com/user/?name=%E9%9A%90%E7%A7%98&amp;%E4%BC%9F%E2%BC%A4%EF%BC%8C&quot;&amp;&quot;">http://hencoder.com/user/?name=隐秘&amp;伟⼤，&quot;&amp;&quot;</a> 符号就会被解析为分隔符号，因此需要对它进⾏转码，转码后的 URL 为 <a href="http://hencoder.com/user/?name=%E9%9A%90%E7%A7%98&%E4%BC%9F%E2%BC%A4">http://hencoder.com/user/?name=隐秘%26伟⼤</a> 。</p>
<p>这种编码仅⽤于 URL，⽬的是避免解析错误的出现。</p>
<h4 id="压缩与解压缩"><a href="#压缩与解压缩" class="headerlink" title="压缩与解压缩"></a>压缩与解压缩</h4><p><strong>含义</strong></p>
<ul>
<li>压缩：将数据使⽤更具有存储优势的编码算法进⾏编码。</li>
<li>解压缩：将压缩数据解码还原成原来的形式，以⽅便使⽤。</li>
</ul>
<p><strong>目的</strong></p>
<p>减⼩数据占⽤的存储空间。</p>
<p><strong>压缩是编码吗？</strong></p>
<p>是。所谓编码，即把数据从⼀种形式转换为另⼀种形式。压缩过程属于编码过程，解压缩过程属于解码过程。</p>
<p><strong>常⻅压缩算法</strong></p>
<p>DEFLATE、JPEG、MP3 等。</p>
<p><strong>图⽚与⾳频、视频编解码</strong></p>
<p><strong>含义</strong></p>
<p>将图像、⾳频、视频数据通过编码来转换成存档形式（编码），以及从存档形式转换回来（解码）。</p>
<p><strong>⽬的</strong></p>
<p>存储和压缩媒体数据（⼤多数媒体编码算法会压缩数据，但不是全部）。</p>
<h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><p>把数据对象（⼀般是内存中的，例如 JVM 中的对象）转换成字节序列的过程。对象在程序内存⾥的存放形式是散乱的（存放在不同的内存区域、并且由引⽤进⾏连接），通过序列化可以把内存中的对象转换成⼀个字节序列，从⽽使⽤ byte[] 等形式进⾏本地存储或⽹络传输，在需要的时候重新组装（反序列化）来使⽤。</p>
<p><strong>⽬的</strong></p>
<p>让内存中的对象可以被储存和传输。</p>
<p><strong>序列化是编码吗？</strong></p>
<p>不是</p>
<p><strong>和编码的区别</strong></p>
<p>编码是把数据由⼀种数据格式转换成另⼀种数据格式；⽽序列化是把数据由内存中的对象（⽽不是某种具体的格式）转换成字节序列。</p>
<h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p><strong>定义</strong></p>
<p>把任意数据转换成指定⼤⼩范围（通常很⼩，例如 256 字节以内）的数据。</p>
<p><strong>作⽤</strong></p>
<p>相当于从数据中提出摘要信息，因此最主要⽤途是数字指纹。</p>
<p><strong>Hash</strong> <strong>的实际⽤途：唯⼀性验证</strong></p>
<p><strong>怎么重写</strong> <strong>hashCode</strong> <strong>⽅法？</strong></p>
<p>把 equals() ⽅法中的每个⽤于判断相等的变量都放进 hashCode() 中，⼀起⽣成⼀个尽量不会碰撞的整数即可</p>
<p><em>为什么每次重写 equals() ⽅法都需要？因为你要把新的判断条件放进hashCode() 啊。</em></p>
<h4 id="Hash-的实际⽤途：数据完整性验证"><a href="#Hash-的实际⽤途：数据完整性验证" class="headerlink" title="Hash 的实际⽤途：数据完整性验证"></a>Hash 的实际⽤途：数据完整性验证</h4><p>从⽹络上下载⽂件后，通过⽐对⽂件的 Hash 值（例如 MD5、SHA1），可以确认下载的⽂件是否有损坏。如果下载的⽂件 Hash 值和⽂件提供⽅给出的 Hash 值⼀致，则证明下载的⽂件是完好⽆损的。</p>
<p><strong>Hash</strong> <strong>的实际⽤途：快速查找</strong></p>
<p>HashMap</p>
<p><strong>Hash</strong> <strong>的实际⽤途：隐私保护</strong></p>
<p>当重要数据必须暴露的时候，有事可以选择暴露它的 Hash 值（例如 MD5），以保障原数据的安全。例如⽹站登录时，可以只保存⽤户密码的 Hash 值，在每次登录验证时只需要将输⼊的密码的 Hash 值和数据库中保存的 Hash 值作⽐对就好，⽹站⽆需知道⽤户的密码。这样，当⽹站数据失窃时，⽤户不会因为⾃⼰的密码被盗导致其他⽹站的安全也受到威胁。</p>
<p>注意：这不属于加密。</p>
<p><strong>Hash</strong> <strong>是编码吗？</strong></p>
<p>不是。 Hash 是单向过程，往往是不可逆的，⽆法进⾏逆向恢复操作，因此 Hash 不属于编码。</p>
<p><strong>Hash</strong> <strong>是加密吗？</strong></p>
<p>不是。Hash 是单向过程，⽆法进⾏逆向回复操作，因此 Hash 不属于加密。（记住，MD5 不是加密！）</p>
<h4 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h4><p><strong>含义：⼀个由整数向现实世界中的⽂字符号的</strong> <strong>Map</strong></p>
<p><strong>分⽀：</strong></p>
<ul>
<li>ASCII：128 个字符，1 字节</li>
<li>ISO-8859-1：对 ASCII 进⾏扩充，1 字节</li>
<li>Unicode：13 万个字符，多字节<ul>
<li>UTF-8：Unicode 的编码分⽀</li>
<li>UTF-16 ：Unicode 的编码分⽀</li>
</ul>
</li>
<li>GBK / GB2312 / GB18030：中国⾃研标准，多字节，字符集 + 编码</li>
</ul>
<p><end>摘自——扔物线课程</end></p>
]]></content>
      <tags>
        <tag>编码</tag>
        <tag>加密</tag>
        <tag>Hash</tag>
        <tag>序列化</tag>
        <tag>字符集</tag>
      </tags>
  </entry>
</search>
